# GitHub Actions Workflow for creating a WordPress plugin release

name: Create WordPress Plugin Release

# This workflow runs when a new tag starting with 'v' is pushed to the repository,
# or when manually triggered from the Actions tab.
on:
    push:
        tags:
            - "v*"
    workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
    build-release:
        name: Build & Release
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the repository code
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 2: Extract the version number from the Git tag or set a default for manual runs
            # This strips 'refs/tags/v' from the tag name (e.g., v1.0.0 -> 1.0.0)
            # and saves it as an environment variable for later steps.
            # If run manually, it defaults to version 0.0.0-test
            - name: Get Version
              id: get_version
              run: |
                  if [[ $GITHUB_REF == refs/tags/v* ]]; then
                    echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
                  else
                    echo "RELEASE_VERSION=0.0.0-test" >> $GITHUB_ENV
                  fi

            # Step 3: Set up PHP environment
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.1" # You can change this to your required PHP version
                  extensions: mbstring, zip
                  tools: composer

            # Step 4: Install Composer dependencies
            # --no-dev ensures that development dependencies (like phpunit) are not installed.
            # --optimize-autoloader is a good practice for production builds.
            - name: Install Composer dependencies
              run: composer install --no-dev --optimize-autoloader

            # Step 5: Set up Node.js environment
            # The version is based on the 'engines' field in your package.json
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"

            # Step 6: Install NPM dependencies
            - name: Install NPM dependencies
              run: npm install

            # Step 7: Build assets for production
            # This runs the 'build' script from your package.json
            - name: Build assets
              run: npm run build

            # Step 8: Create the release package (zip file)
            # This is a crucial step. It creates a clean directory with only the files
            # needed for the plugin to work on a WordPress site.
            - name: Package Plugin
              run: |
                  PLUGIN_SLUG="swift-coupons"

                  # Copy only the necessary files for the plugin to the release directory.
                  # We are excluding development files and folders.
                  rsync -av --progress ./ $PLUGIN_SLUG \
                    --exclude=".git" \
                    --exclude=".github" \
                    --exclude="node_modules" \
                    --exclude="tests" \
                    --exclude="*.bak" \
                    --exclude="phpunit.xml" \
                    --exclude="README.md" \
                    --exclude=".gitignore"

                  # Create the zip file from the clean directory
                  zip -r ${PLUGIN_SLUG}.${{ env.RELEASE_VERSION }}.zip $PLUGIN_SLUG

            # Step 9: Create a GitHub Release
            # This uses the popular softprops/action-gh-release action to create the release.
            # It automatically generates release notes from your commit history.
            # This step will only run if the workflow was triggered by a tag push.
            - name: Create GitHub Release
              if: startsWith(github.ref, 'refs/tags/v')
              uses: softprops/action-gh-release@v2
              with:
                  # This enables automatic generation of release notes.
                  generate_release_notes: true
                  # Attach the created zip file to the release.
                  files: |
                      swift-coupons.${{ env.RELEASE_VERSION }}.zip

            # Step 10: Upload artifact for manual testing
            # If the workflow is triggered manually, it won't create a release,
            # but it will upload the generated zip file as a build artifact.
            # You can download this from the workflow run summary page.
            - name: Upload Test Artifact
              if: "!startsWith(github.ref, 'refs/tags/v')"
              uses: actions/upload-artifact@v4
              with:
                  name: swift-coupons-test-build
                  path: swift-coupons.${{ env.RELEASE_VERSION }}.zip
